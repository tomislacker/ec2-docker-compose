---
- hosts: demos
  connection: local
  gather_facts: no

  vars:
    ansible_python_interpreter: "/usr/bin/env python2.7"
    ec2_instance_tags:
      Name: "{{ inventory_hostname }}"
      Environment: qa
      PoC: snelson@telkonet.com
      Purpose: "API Demo"
    ec2_count_tags:
      Name: "{{ ec2_instance_tags.Name }}"

    ec2_subnet_id: "{{ vpc_subnets.a }}"
    names:
      sg: "{{ inventory_hostname }}"
  
  tasks:
    - name: Create security group
      ec2_group:
        name: "{{ names.sg }}"
        description: "SG for {{ inventory_hostname }}"
        vpc_id: "{{ vpc_id }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 5000
            to_port: 5000
            cidr_ip: 0.0.0.0/0
      
    - name: Create instance
      ec2:
        image: "{{ base_ami }}"
        instance_type: "{{ ec2_instance_type }}"
        keypair: "{{ ec2_keypair }}"
        region: "{{ aws_region }}"
        group: "{{ names.sg }}"
        vpc_subnet_id: "{{ ec2_subnet_id }}"
        instance_tags: "{{ ec2_instance_tags }}"
        exact_count: 1
        count_tag: "{{ ec2_count_tags }}"
        assign_public_ip: yes
        wait: true
        volumes:
          - device_name: /dev/xvda
            volume_size: "{{ ec2_volume_size }}"
            volume_type: gp2
            delete_on_termination: true
      register: ec2_info

    - debug: var=ec2_info
    - name: Set EC2 Address
      set_fact: ansible_ssh_host="{{ item.public_ip }}"
      with_items: "{{ ec2_info.tagged_instances }}"

    - name: Wait for instance to respond to SSH
      wait_for:
        state: started
        host: "{{ item.public_ip }}"
      with_items: "{{ ec2_info.tagged_instances }}"
      when: "{{ ec2_info.changed }}"

- hosts: demos
  gather_facts: yes
  become: yes

  vars:
    ansible_python_interpreter: "/usr/bin/env python2.7"

  pre_tasks:
    - action: ec2_facts
    - wait_for: path=/var/log/cloud-init.log state=present search_regex=final

  tasks:
      - debug: msg=Yay

# vim: ft=ansible
