---
- hosts: demos
  connection: local
  gather_facts: no

  vars:
    ansible_python_interpreter: "/usr/bin/env python2.7"
    ec2_instance_tags:
      Name: "{{ inventory_hostname }}"
      Environment: qa
      PoC: snelson@telkonet.com
      Purpose: "API Demo"
    ec2_count_tags:
      Name: "{{ ec2_instance_tags.Name }}"

    ec2_subnet_id: "{{ vpc_subnets.a }}"
    names:
      sg: "{{ inventory_hostname }}"
  
  tasks:
    - name: Create security group
      ec2_group:
        name: "{{ names.sg }}"
        description: "SG for {{ inventory_hostname }}"
        vpc_id: "{{ vpc_id }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 5000
            to_port: 5000
            cidr_ip: 0.0.0.0/0
      
    - name: Create instance
      ec2:
        image: "{{ base_ami }}"
        instance_type: "{{ ec2_instance_type }}"
        keypair: "{{ ec2_keypair }}"
        region: "{{ aws_region }}"
        group: "{{ names.sg }}"
        vpc_subnet_id: "{{ ec2_subnet_id }}"
        instance_tags: "{{ ec2_instance_tags }}"
        exact_count: 1
        count_tag: "{{ ec2_count_tags }}"
        assign_public_ip: yes
        wait: true
        volumes:
          - device_name: /dev/xvda
            volume_size: "{{ ec2_volume_size }}"
            volume_type: gp2
            delete_on_termination: true
      register: ec2_info

    - debug: var=ec2_info
    - name: Set EC2 Address
      set_fact: ansible_ssh_host="{{ item.public_ip }}"
      with_items: "{{ ec2_info.tagged_instances }}"

    - name: Wait for instance to respond to SSH
      wait_for:
        state: started
        host: "{{ item.public_ip }}"
      with_items: "{{ ec2_info.tagged_instances }}"
      when: "{{ ec2_info.changed }}"

    - name: Create Route53 CNAME
      route53:
        command: create
        zone: "{{ r53_zone }}"
        record: "{{ r53_record }}"
        overwrite: yes
        type: CNAME
        ttl: 300
        value: "{{ ec2_info.tagged_instances[0].public_dns_name }}"
      when:
        - r53_zone is defined
        - r53_record is defined

- hosts: demos
  gather_facts: yes
  become: yes

  vars:
    ansible_python_interpreter: "/usr/bin/env python2.7"
    deploy_src_zip: ./docker-gateway-api-test.zip
    deploy_zip: /tmp/deploy.zip
    deploy_tmp: /tmp/deploy
    docker_compose_version: 1.11.2
    docker_compose_url: "https://github.com/docker/compose/releases/download/1.11.2/docker-compose-{{ ansible_system }}-{{ ansible_architecture }}"

  pre_tasks:
    - action: ec2_facts
    - wait_for: path=/var/log/cloud-init.log state=present search_regex=final

  tasks:
    - name: Install docker prereqs
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - unzip
        - python-setuptools

    - name: Install docker apt-key
      apt_key:
        id: 0EBFCD88
        url: https://download.docker.com/linux/debian/gpg
        state: present

    - name: Install docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
        state: present

    - name: Install docker
      apt:
        name: docker-ce
        state: present

    - name: Install pip
      easy_install:
        name: pip
        state: latest

    - name: Install Python dependencies for docker
      pip:
        name: "{{ item }}"
      with_items:
        - docker

    - name: Add admin user to docker group
      user:
        name: admin
        groups: docker
        append: yes

    - name: Copy deployment zip
      copy:
        src: "{{ deploy_src_zip }}"
        dest: "{{ deploy_zip }}"
        owner: admin
        group: admin
        mode: 0644

    - name: Create deployment directory
      file:
        path: "{{ deploy_tmp }}"
        state: directory
        owner: admin
        group: admin
        mode: 0775

    - name: Extract zip
      unarchive:
        src: "{{ deploy_zip }}"
        remote_src: yes
        dest: "{{ deploy_tmp }}"

    - name: Build API container
      command: docker build --no-cache --tag tko_gateway_api_test .
      args:
        chdir: "{{ deploy_tmp }}"
      register: build_image

    - name: Install docker-compose
      get_url:
        url: "{{ docker_compose_url }}"
        dest: /usr/bin/docker-compose
        owner: root
        group: root
        mode: 0755

    - name: Install docker-compose service unit
      template:
        src: etc/systemd/system/docker-compose.service
        remote_src: yes
        dest: /etc/systemd/system/docker-compose.service
        owner: root
        group: root
        mode: 0644
      register: service_unit

    - name: systemctl daemon-reload
      command: systemctl daemon-reload
      when: service_unit.changed

    - name: Restart docker-compose service
      service:
        name: docker-compose
        state: restarted
        enabled: yes
      when: service_unit.changed or build_image.changed

# vim: ft=ansible
